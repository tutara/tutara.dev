(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{378:function(t,a,e){"use strict";e.r(a);var r=e(44),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"logic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logic"}},[t._v("#")]),t._v(" Logic")]),t._v(" "),e("p",[t._v("There are three basic logic operators: 'or', 'and' and 'not'. Using these you can fully use boolean algebra. Besides the basic three there are more operators that combine combinations of these three to reduce the footprint of logic expressions.")]),t._v(" "),e("p",[t._v("Comparison operators are used in comparing values on a left- and right-hand side to evaluate to a boolean value.")]),t._v(" "),e("h2",{attrs:{id:"logic-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logic-operators"}},[t._v("#")]),t._v(" Logic operators")]),t._v(" "),e("p",[e("strong",[t._v("EBNF Notation")])]),t._v(" "),e("div",{staticClass:"language-ebnf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ebnf"}},[e("code",[e("span",{pre:!0,attrs:{class:"token definition rule keyword"}},[t._v("logic_operator")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&&"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"||"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"not"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#not"}},[t._v("#")]),t._v(" Not")]),t._v(" "),e("p",[t._v("The not operator is a unary operator used for inverting the boolean state.")]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = true\nval bar = !foo\n\n// the value of 'bar' is 'false'\n")])])]),e("h3",{attrs:{id:"and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#and"}},[t._v("#")]),t._v(" And")]),t._v(" "),e("p",[t._v("Compares two comparison expressions and evaluates if both resolved values are true and returns true if so.")]),t._v(" "),e("p",[e("strong",[t._v("Logical table")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("P")]),t._v(" "),e("th",[t._v("Q")]),t._v(" "),e("th",[t._v("P ^ Q")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")])])])]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = true\nval bar = true\n\nvar baz = foo && bar\n\n// the value of 'baz' is 'true'\n\nbaz = false && bar\n\n// the value of 'baz' is 'false'\n")])])]),e("h3",{attrs:{id:"or"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#or"}},[t._v("#")]),t._v(" Or")]),t._v(" "),e("p",[t._v("Compares two comparison expressions and evaluates if either resolved value is true and returns true if so.")]),t._v(" "),e("p",[e("strong",[t._v("Logical table")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("P")]),t._v(" "),e("th",[t._v("Q")]),t._v(" "),e("th",[t._v("P ∨ Q")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")])])])]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = true\nval bar = true\n\nvar baz = foo || bar\n\n// the value of 'baz' is 'true'\n\nbaz = false && bar\n\n// the value of 'baz' is 'true'\n")])])]),e("h2",{attrs:{id:"comparison-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comparison-operators"}},[t._v("#")]),t._v(" comparison operators")]),t._v(" "),e("p",[e("strong",[t._v("EBNF Notation")])]),t._v(" "),e("div",{staticClass:"language-ebnf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ebnf"}},[e("code",[e("span",{pre:!0,attrs:{class:"token definition rule keyword"}},[t._v("comparison_operator")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=="')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!="')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<="')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('">="')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('">"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"equality"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#equality"}},[t._v("#")]),t._v(" Equality")]),t._v(" "),e("p",[t._v("Compares two expressions on equality. If both sides' value are the same it evaluates to true.")]),t._v(" "),e("p",[e("strong",[t._v("Logical table")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("P")]),t._v(" "),e("th",[t._v("Q")]),t._v(" "),e("th",[t._v("P ↔ Q")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")])])])]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = true\nval bar = true\n\nvar baz = foo == bar\n\n// the value of 'baz' is 'true'\n\nbaz = false == bar\n\n// the value of 'baz' is 'false'\n\nif (baz == false) {\n  baz = true\n}\n\n// The end result for 'baz' is 'true'\n")])])]),e("h3",{attrs:{id:"disjunction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disjunction"}},[t._v("#")]),t._v(" Disjunction")]),t._v(" "),e("p",[t._v("Compares two expressions on non equality. If both sides' value differ it evaluates to true.")]),t._v(" "),e("p",[e("strong",[t._v("Logical table")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("P")]),t._v(" "),e("th",[t._v("Q")]),t._v(" "),e("th",[t._v("P ⊕ Q")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("true")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("false")])])])]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = true\nval bar = true\n\nvar baz = foo != bar\n\n// the value of 'baz' is 'false'\n\nbaz = false != bar\n\n// the value of 'baz' is 'true'\n\nif (baz != false) {\n  baz = false\n}\n\n// The end result for 'baz' is 'false'\n")])])]),e("h3",{attrs:{id:"greater-or-equal-to"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#greater-or-equal-to"}},[t._v("#")]),t._v(" Greater or equal to")]),t._v(" "),e("p",[t._v("Compares two expressions on value size. If the left hand's value is greater or equal to the right hands it evaluates to true.")]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = 12\nvar bar = 6\n\nif (foo >= bar) {\n  // foo is greater than bar\n}\n\nbar = 12\n\nif (foo >= bar) {\n  // foo is equal to bar\n}\n")])])]),e("h3",{attrs:{id:"lesser-or-equal-to"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lesser-or-equal-to"}},[t._v("#")]),t._v(" Lesser or equal to")]),t._v(" "),e("p",[t._v("Compares two expressions on value size. If the left hand's value is lesser or equal to the right hands it evaluates to true.")]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = 6\nvar bar = 12\n\nif (foo <= bar) {\n  // foo is smaller than bar\n}\n\nfoo = 12\n\nif (foo <= bar) {\n  // foo is equal to bar\n}\n")])])]),e("h3",{attrs:{id:"greater-than"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#greater-than"}},[t._v("#")]),t._v(" Greater than")]),t._v(" "),e("p",[t._v("Compares two expressions on value size. If the left hand's value is greater than the right hands it evaluates to true.")]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = 12\nvar bar = 6\n\nif (foo > bar) {\n  // foo is greater than bar\n}\n\nbar = 14\n\nif (foo > bar) {\n  // this block wont be reached\n}\n")])])]),e("h3",{attrs:{id:"lesser-than"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lesser-than"}},[t._v("#")]),t._v(" Lesser than")]),t._v(" "),e("p",[t._v("Compares two expressions on value size. If the left hand's value is lesser than the right hands it evaluates to true.")]),t._v(" "),e("p",[e("strong",[t._v("Example")])]),t._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("val foo = 12\nvar bar = 6\n\nif (foo < bar) {\n  // this block wont be reached\n}\n\nbar = 14\n\nif (foo < bar) {\n  // foo is lesser than bar\n}\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);