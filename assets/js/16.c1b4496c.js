(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{380:function(a,t,e){"use strict";e.r(t);var r=e(44),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"logic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logic"}},[a._v("#")]),a._v(" Logic")]),a._v(" "),e("p",[a._v("There are three basic logic operators: 'or', 'and' and 'not'. Using these you\ncan fully use boolean algebra. Besides the basic three there are more operators\nthat combine combinations of these three to reduce the footprint of logic\nexpressions.")]),a._v(" "),e("p",[a._v("Comparison operators are used in comparing values on a left- and right-hand side\nto evaluate to a boolean value.")]),a._v(" "),e("h2",{attrs:{id:"logic-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logic-operators"}},[a._v("#")]),a._v(" Logic operators")]),a._v(" "),e("h3",{attrs:{id:"ebnf-notation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ebnf-notation"}},[a._v("#")]),a._v(" EBNF Notation")]),a._v(" "),e("div",{staticClass:"language-ebnf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ebnf"}},[e("code",[e("span",{pre:!0,attrs:{class:"token definition rule keyword"}},[a._v("logic_operator")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"!"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"&&"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"||"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("h3",{attrs:{id:"not"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#not"}},[a._v("#")]),a._v(" Not")]),a._v(" "),e("p",[a._v("The not operator is a unary operator used for inverting the boolean state.")]),a._v(" "),e("h3",{attrs:{id:"example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = true\nval bar = !foo\n\n// the value of 'bar' is 'false'\n")])])]),e("h3",{attrs:{id:"and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#and"}},[a._v("#")]),a._v(" And")]),a._v(" "),e("p",[a._v("Compares two comparison expressions and evaluates if both resolved values are\ntrue and returns true if so.")]),a._v(" "),e("h3",{attrs:{id:"logical-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logical-table"}},[a._v("#")]),a._v(" Logical table")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("P")]),a._v(" "),e("th",[a._v("Q")]),a._v(" "),e("th",[a._v("P ^ Q")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("false")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")])])])]),a._v(" "),e("h3",{attrs:{id:"example-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = true\nval bar = true\n\nvar baz = foo && bar\n\n// the value of 'baz' is 'true'\n\nbaz = false && bar\n\n// the value of 'baz' is 'false'\n")])])]),e("h3",{attrs:{id:"or"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#or"}},[a._v("#")]),a._v(" Or")]),a._v(" "),e("p",[a._v("Compares two comparison expressions and evaluates if either resolved value is\ntrue and returns true if so.")]),a._v(" "),e("h3",{attrs:{id:"logical-table-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logical-table-2"}},[a._v("#")]),a._v(" Logical table")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("P")]),a._v(" "),e("th",[a._v("Q")]),a._v(" "),e("th",[a._v("P ∨ Q")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")])])])]),a._v(" "),e("h3",{attrs:{id:"example-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-3"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = true\nval bar = true\n\nvar baz = foo || bar\n\n// the value of 'baz' is 'true'\n\nbaz = false && bar\n\n// the value of 'baz' is 'true'\n")])])]),e("h2",{attrs:{id:"comparison-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comparison-operators"}},[a._v("#")]),a._v(" comparison operators")]),a._v(" "),e("h3",{attrs:{id:"ebnf-notation-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ebnf-notation-2"}},[a._v("#")]),a._v(" EBNF Notation")]),a._v(" "),e("div",{staticClass:"language-ebnf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ebnf"}},[e("code",[e("span",{pre:!0,attrs:{class:"token definition rule keyword"}},[a._v("comparison_operator")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=="')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"!="')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<="')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('">="')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('">"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("h3",{attrs:{id:"equality"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#equality"}},[a._v("#")]),a._v(" Equality")]),a._v(" "),e("p",[a._v("Compares two expressions on equality. If both sides' value are the same it\nevaluates to true.")]),a._v(" "),e("h3",{attrs:{id:"logical-table-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logical-table-3"}},[a._v("#")]),a._v(" Logical table")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("P")]),a._v(" "),e("th",[a._v("Q")]),a._v(" "),e("th",[a._v("P ↔ Q")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")])])])]),a._v(" "),e("h3",{attrs:{id:"example-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-4"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = true\nval bar = true\n\nvar baz = foo == bar\n\n// the value of 'baz' is 'true'\n\nbaz = false == bar\n\n// the value of 'baz' is 'false'\n\nif (baz == false) {\n  baz = true\n}\n\n// The end result for 'baz' is 'true'\n")])])]),e("h3",{attrs:{id:"disjunction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disjunction"}},[a._v("#")]),a._v(" Disjunction")]),a._v(" "),e("p",[a._v("Compares two expressions on non equality. If both sides' value differ it\nevaluates to true.")]),a._v(" "),e("h3",{attrs:{id:"logical-table-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logical-table-4"}},[a._v("#")]),a._v(" Logical table")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("P")]),a._v(" "),e("th",[a._v("Q")]),a._v(" "),e("th",[a._v("P ⊕ Q")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("true")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("true")]),a._v(" "),e("td",[a._v("true")])]),a._v(" "),e("tr",[e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("false")])])])]),a._v(" "),e("h3",{attrs:{id:"example-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-5"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = true\nval bar = true\n\nvar baz = foo != bar\n\n// the value of 'baz' is 'false'\n\nbaz = false != bar\n\n// the value of 'baz' is 'true'\n\nif (baz != false) {\n  baz = false\n}\n\n// The end result for 'baz' is 'false'\n")])])]),e("h3",{attrs:{id:"greater-or-equal-to"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#greater-or-equal-to"}},[a._v("#")]),a._v(" Greater or equal to")]),a._v(" "),e("p",[a._v("Compares two expressions on value size. If the left hand's value is greater or\nequal to the right hands it evaluates to true.")]),a._v(" "),e("h3",{attrs:{id:"example-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-6"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = 12\nvar bar = 6\n\nif (foo >= bar) {\n  // foo is greater than bar\n}\n\nbar = 12\n\nif (foo >= bar) {\n  // foo is equal to bar\n}\n")])])]),e("h3",{attrs:{id:"lesser-or-equal-to"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lesser-or-equal-to"}},[a._v("#")]),a._v(" Lesser or equal to")]),a._v(" "),e("p",[a._v("Compares two expressions on value size. If the left hand's value is lesser or\nequal to the right hands it evaluates to true.")]),a._v(" "),e("h3",{attrs:{id:"example-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-7"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = 6\nvar bar = 12\n\nif (foo <= bar) {\n  // foo is smaller than bar\n}\n\nfoo = 12\n\nif (foo <= bar) {\n  // foo is equal to bar\n}\n")])])]),e("h3",{attrs:{id:"greater-than"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#greater-than"}},[a._v("#")]),a._v(" Greater than")]),a._v(" "),e("p",[a._v("Compares two expressions on value size. If the left hand's value is greater\nthan the right hands it evaluates to true.")]),a._v(" "),e("h3",{attrs:{id:"example-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-8"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = 12\nvar bar = 6\n\nif (foo > bar) {\n  // foo is greater than bar\n}\n\nbar = 14\n\nif (foo > bar) {\n  // this block wont be reached\n}\n")])])]),e("h3",{attrs:{id:"lesser-than"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lesser-than"}},[a._v("#")]),a._v(" Lesser than")]),a._v(" "),e("p",[a._v("Compares two expressions on value size. If the left hand's value is lesser than\nthe right hands it evaluates to true.")]),a._v(" "),e("h3",{attrs:{id:"example-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-9"}},[a._v("#")]),a._v(" Example")]),a._v(" "),e("div",{staticClass:"language-ttr extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val foo = 12\nvar bar = 6\n\nif (foo < bar) {\n  // this block wont be reached\n}\n\nbar = 14\n\nif (foo < bar) {\n  // foo is lesser than bar\n}\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);