(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{378:function(a,s,t){"use strict";t.r(s);var e=t(44),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[a._v("#")]),a._v(" Operators")]),a._v(" "),t("p",[a._v("Operators are split into two categories: arithmetic operators and assignment operators. Arithmetic operators can be used to manipulate literals and variables. assignment operators can be used in the same way but include a mandatory assignment to a variable.")]),a._v(" "),t("p",[t("strong",[a._v("EBNF Notation")])]),a._v(" "),t("div",{staticClass:"language-ebnf extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ebnf"}},[t("code",[t("span",{pre:!0,attrs:{class:"token definition rule keyword"}},[a._v("arithmetic_operator")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"+"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"*"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"^"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token definition rule keyword"}},[a._v("assignment_operator")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"+="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"*="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"^="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%="')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"arithmetic-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic-operators"}},[a._v("#")]),a._v(" Arithmetic operators")]),a._v(" "),t("p",[a._v("Arithmetic operators include the fundamental operators of arithmetic.")]),a._v(" "),t("h3",{attrs:{id:"plus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plus"}},[a._v("#")]),a._v(" Plus")]),a._v(" "),t("p",[a._v("The plus operator is used for adding two values.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("5 + 7\n1 + 1 + 2\n'foo' + 'bar'\n")])])]),t("h3",{attrs:{id:"minus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minus"}},[a._v("#")]),a._v(" Minus")]),a._v(" "),t("p",[a._v("The minus operator is used for subtracting two values.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("3 - 2\n1 - 3 - 5\n")])])]),t("h3",{attrs:{id:"multiply"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multiply"}},[a._v("#")]),a._v(" Multiply")]),a._v(" "),t("p",[a._v("The multiply operator is used for multiplying two values.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("3 * 1\n3 * 5\n")])])]),t("h3",{attrs:{id:"division"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#division"}},[a._v("#")]),a._v(" Division")]),a._v(" "),t("p",[a._v("The division operator is used for dividing. Divide by zero is an illegal operation and thorws a runtime error.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("9 / 2\n12 / 4\n191 / 0 <- Not allowed \n")])])]),t("h3",{attrs:{id:"pow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pow"}},[a._v("#")]),a._v(" Pow")]),a._v(" "),t("p",[a._v("The pow operator is used for power levy.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("2 ^ 64\n3 ^ 2\n42 ^ 0\n")])])]),t("h3",{attrs:{id:"modulo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modulo"}},[a._v("#")]),a._v(" Modulo")]),a._v(" "),t("p",[a._v("The modulo operator is used for getting the remainder of a division.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("9 % 2\n13 % 7\n")])])]),t("h2",{attrs:{id:"assignment-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assignment-operators"}},[a._v("#")]),a._v(" Assignment operators")]),a._v(" "),t("p",[a._v("Assignment operators are used as a shorthand expression when performing an optional operation and assignment at the same time.")]),a._v(" "),t("h2",{attrs:{id:"assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assign"}},[a._v("#")]),a._v(" Assign")]),a._v(" "),t("p",[a._v("The basic assign operator for assigning a literal or expression to a variable. See "),t("RouterLink",{attrs:{to:"/syntax/variables.html"}},[a._v("variables")])],1),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var foo = 'bar'\nvar bar = 3\n")])])]),t("h2",{attrs:{id:"plus-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plus-assign"}},[a._v("#")]),a._v(" Plus assign")]),a._v(" "),t("p",[a._v("Plus assign can be used to add a value to an existing variable and directly assigning the new value to itself.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var foo = 3\nfoo += 1\n\nvar bar = 'string'\nbar += 'another string'\n")])])]),t("h2",{attrs:{id:"minus-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minus-assign"}},[a._v("#")]),a._v(" Minus assign")]),a._v(" "),t("p",[a._v("Minus assign can be used to subtract a value of an existing variable and directly assigning the new value to itself.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var foo = 9\nfoo -= 7\n\nvar bar = 17\nbar -= 5\n")])])]),t("h2",{attrs:{id:"multiply-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multiply-assign"}},[a._v("#")]),a._v(" Multiply assign")]),a._v(" "),t("p",[a._v("Multiply assign can be used to multiply a value with an existing variable and directly assigning the new value to itself.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var foo = 3\nfoo *= 3\n\nvar bar = 2\nbar *= 12\n")])])]),t("h2",{attrs:{id:"divide-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#divide-assign"}},[a._v("#")]),a._v(" Divide assign")]),a._v(" "),t("p",[a._v("Divide assign can be used to divide a variable by an value and directly assigning the new value to itself.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var foo = 9\nfoo /= 3\n\nvar bar = 22\nbar /= 11\n")])])]),t("h2",{attrs:{id:"pow-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pow-assign"}},[a._v("#")]),a._v(" Pow assign")]),a._v(" "),t("p",[a._v("Pow assign can be used to power levy a variable by an value and directly assigning the new value to itself.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var foo = 2\nfoo ^= 8\n\nvar bar = 50\nbar ^= 1\n")])])]),t("h2",{attrs:{id:"modulo-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modulo-assign"}},[a._v("#")]),a._v(" Modulo assign")]),a._v(" "),t("p",[a._v("Modulo assign can be used to get the remainder of an division by a value and an existing variable and directly assigning the new value to itself.")]),a._v(" "),t("p",[t("strong",[a._v("Example")])]),a._v(" "),t("div",{staticClass:"language-ttr extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var foo = 48\nfoo %= 3\n\nvar bar = 3\nbar %= 2\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);